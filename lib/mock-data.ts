import type { Experiment, ExperimentResult, DailyMetric } from "./types"

export const mockExperiments: Experiment[] = [
  {
    id: "exp-001",
    name: "Checkout Button Color Test",
    description: "Testing blue vs green checkout button to improve conversion rates",
    status: "running",
    startDate: "2025-01-15",
    hypothesis:
      "A green checkout button will increase conversion rate by at least 5% compared to the current blue button",
    variants: [
      {
        id: "var-001-control",
        name: "Control (Blue)",
        description: "Current blue checkout button",
        trafficPercentage: 50,
        isControl: true,
      },
      {
        id: "var-001-treatment",
        name: "Treatment (Green)",
        description: "New green checkout button",
        trafficPercentage: 50,
        isControl: false,
      },
    ],
    metrics: [
      {
        id: "metric-001",
        name: "Checkout Conversion Rate",
        type: "conversion",
        description: "Percentage of users who complete checkout",
        isPrimary: true,
      },
      {
        id: "metric-002",
        name: "Revenue Per User",
        type: "revenue",
        description: "Average revenue generated per user",
        isPrimary: false,
      },
    ],
    sampleSize: 45000,
    trafficAllocation: 100,
    createdAt: "2025-01-10",
    updatedAt: "2025-01-15",
  },
  {
    id: "exp-002",
    name: "Onboarding Flow Simplification",
    description: "Reducing onboarding steps from 5 to 3 to improve completion rate",
    status: "completed",
    startDate: "2024-12-01",
    endDate: "2025-01-10",
    hypothesis: "Simplifying onboarding from 5 steps to 3 will increase completion rate by 15%",
    variants: [
      {
        id: "var-002-control",
        name: "Control (5 Steps)",
        description: "Current 5-step onboarding",
        trafficPercentage: 50,
        isControl: true,
      },
      {
        id: "var-002-treatment",
        name: "Treatment (3 Steps)",
        description: "Simplified 3-step onboarding",
        trafficPercentage: 50,
        isControl: false,
      },
    ],
    metrics: [
      {
        id: "metric-003",
        name: "Onboarding Completion Rate",
        type: "conversion",
        description: "Percentage of users who complete onboarding",
        isPrimary: true,
      },
      {
        id: "metric-004",
        name: "Time to Complete",
        type: "engagement",
        description: "Average time to complete onboarding",
        isPrimary: false,
      },
    ],
    sampleSize: 32000,
    trafficAllocation: 100,
    createdAt: "2024-11-25",
    updatedAt: "2025-01-10",
  },
  {
    id: "exp-003",
    name: "Pricing Page Layout Test",
    description: "Testing horizontal vs vertical pricing card layout",
    status: "draft",
    startDate: "2025-02-01",
    hypothesis: "A horizontal pricing layout will increase plan selection rate by 8%",
    variants: [
      {
        id: "var-003-control",
        name: "Control (Vertical)",
        description: "Current vertical pricing cards",
        trafficPercentage: 50,
        isControl: true,
      },
      {
        id: "var-003-treatment",
        name: "Treatment (Horizontal)",
        description: "New horizontal pricing layout",
        trafficPercentage: 50,
        isControl: false,
      },
    ],
    metrics: [
      {
        id: "metric-005",
        name: "Plan Selection Rate",
        type: "conversion",
        description: "Percentage of users who select a plan",
        isPrimary: true,
      },
    ],
    sampleSize: 0,
    trafficAllocation: 100,
    createdAt: "2025-01-20",
    updatedAt: "2025-01-20",
  },
  {
    id: "exp-004",
    name: "Email Subject Line Test",
    description: "Testing personalized vs generic email subject lines",
    status: "running",
    startDate: "2025-01-20",
    hypothesis: "Personalized subject lines will increase email open rate by 12%",
    variants: [
      {
        id: "var-004-control",
        name: "Control (Generic)",
        description: "Generic subject line",
        trafficPercentage: 50,
        isControl: true,
      },
      {
        id: "var-004-treatment",
        name: "Treatment (Personalized)",
        description: "Personalized subject line with user name",
        trafficPercentage: 50,
        isControl: false,
      },
    ],
    metrics: [
      {
        id: "metric-006",
        name: "Email Open Rate",
        type: "engagement",
        description: "Percentage of emails opened",
        isPrimary: true,
      },
      {
        id: "metric-007",
        name: "Click-Through Rate",
        type: "engagement",
        description: "Percentage of users who click links in email",
        isPrimary: false,
      },
    ],
    sampleSize: 28000,
    trafficAllocation: 100,
    createdAt: "2025-01-18",
    updatedAt: "2025-01-20",
  },
]

export const mockResults: ExperimentResult[] = [
  {
    experimentId: "exp-001",
    variantId: "var-001-control",
    variantName: "Control (Blue)",
    sampleSize: 22500,
    conversionRate: 0.0842,
    mean: 0.0842,
    standardDeviation: 0.0023,
    confidenceInterval: [0.0797, 0.0887],
    pValue: 0.0,
    statisticalSignificance: true,
    relativeUplift: 0,
    absoluteUplift: 0,
  },
  {
    experimentId: "exp-001",
    variantId: "var-001-treatment",
    variantName: "Treatment (Green)",
    sampleSize: 22500,
    conversionRate: 0.0993,
    mean: 0.0993,
    standardDeviation: 0.0025,
    confidenceInterval: [0.0944, 0.1042],
    pValue: 0.0001,
    statisticalSignificance: true,
    relativeUplift: 0.179,
    absoluteUplift: 0.0151,
  },
  {
    experimentId: "exp-002",
    variantId: "var-002-control",
    variantName: "Control (5 Steps)",
    sampleSize: 16000,
    conversionRate: 0.6125,
    mean: 0.6125,
    standardDeviation: 0.0038,
    confidenceInterval: [0.6051, 0.6199],
    pValue: 0.0,
    statisticalSignificance: true,
    relativeUplift: 0,
    absoluteUplift: 0,
  },
  {
    experimentId: "exp-002",
    variantId: "var-002-treatment",
    variantName: "Treatment (3 Steps)",
    sampleSize: 16000,
    conversionRate: 0.7043,
    mean: 0.7043,
    standardDeviation: 0.0036,
    confidenceInterval: [0.6973, 0.7113],
    pValue: 0.0,
    statisticalSignificance: true,
    relativeUplift: 0.1499,
    absoluteUplift: 0.0918,
  },
  {
    experimentId: "exp-004",
    variantId: "var-004-control",
    variantName: "Control (Generic)",
    sampleSize: 14000,
    conversionRate: 0.2314,
    mean: 0.2314,
    standardDeviation: 0.0036,
    confidenceInterval: [0.2244, 0.2384],
    pValue: 0.0,
    statisticalSignificance: true,
    relativeUplift: 0,
    absoluteUplift: 0,
  },
  {
    experimentId: "exp-004",
    variantId: "var-004-treatment",
    variantName: "Treatment (Personalized)",
    sampleSize: 14000,
    conversionRate: 0.2591,
    mean: 0.2591,
    standardDeviation: 0.0037,
    confidenceInterval: [0.2519, 0.2663],
    pValue: 0.0,
    statisticalSignificance: true,
    relativeUplift: 0.1197,
    absoluteUplift: 0.0277,
  },
]

export const mockDailyMetrics: DailyMetric[] = [
  // Last 14 days for exp-001
  ...Array.from({ length: 14 }, (_, i) => {
    const date = new Date()
    date.setDate(date.getDate() - (13 - i))
    const dateStr = date.toISOString().split("T")[0]

    return [
      {
        date: dateStr,
        variantId: "var-001-control",
        variantName: "Control (Blue)",
        users: 1600 + Math.floor(Math.random() * 200),
        conversions: 135 + Math.floor(Math.random() * 15),
        conversionRate: 0.0842 + (Math.random() - 0.5) * 0.01,
      },
      {
        date: dateStr,
        variantId: "var-001-treatment",
        variantName: "Treatment (Green)",
        users: 1600 + Math.floor(Math.random() * 200),
        conversions: 159 + Math.floor(Math.random() * 15),
        conversionRate: 0.0993 + (Math.random() - 0.5) * 0.01,
      },
    ]
  }).flat(),
]
